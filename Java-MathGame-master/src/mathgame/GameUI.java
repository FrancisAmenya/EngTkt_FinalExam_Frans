/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mathgame;

import java.applet.Applet;
import java.applet.AudioClip;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.midi.InvalidMidiDataException;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.MidiUnavailableException;
import javax.sound.midi.Sequencer;
import javax.swing.JLabel;
import javax.swing.Popup;
import javax.swing.PopupFactory;
import javax.swing.Timer;

/**
 *
 * @author Levit Nudi
 */
public class GameUI extends javax.swing.JFrame {

    
//DO NOT RENAME BELOW VARIABLES    
int count_timer = 0;
int max_time = 60;//one minute
int user_score = 0;
int first_number = 0;
int second_number = 0;
int user_guess = 0;
int correct_answer = 0;
int max_number_of_questions = 10;
int number_of_answered_questions = 0;
String beep = "beep.wav";
String music = "music.mid";//feel free to change the music and sound effects
//music will start playing inside formWindowOpened() method. This is called
//when the game window is opened
String score = "score.wav";
//DO NOT RENAME ABOVE VARIABLES 
    /**
     * Creates new form GameUI
     * 
     * 
     * WARNING
     * 
     * ANY FORM OF DISHONESTY OR PLAGIARISM WILL LEAD TO DISQUALIFICATION
     * 
     * 
     * FUNDAMENTALS OF COMPUTER SCIENCE SEM1 (30 points)
     * Instructions
     * 
     * 
     * PART A (10 points)
     * 1. Let Quit menu button close the application
     * 2. disable guess button when time is up (use setEnabled(false) method on the button) and enable it
     * when game start button is clicked
     * 3. Rename ALL variable names of swing components, e.g labels, button, textFields etc
     * 
     * 
     * PART B (10 points)
     * 1. Create Another GUI using JDialog called HelpDialog similar to AboutDialog
     * 2. Give the dialog a title of 'Help' and use specifications for AboutDialog(font size etc)
     * 3. Use labels to describe how the game is played
     * 4. Use serif font for your descriptions
     * 5. Add a close button similar to the one in AboutDialog and make the click action close the dialog
     * 6. When the user clicks Tutorial under help menu, let it open HelpDialog (see how AboutDialog opens)
     * 
     * 
     * PART C (10 points)
     * 1. Package application using launch4j
     * 2. Add splash screen and use YOUR OWN icon and image
     * you can get free icons from (http://www.iconarchive.com/tag/ico-files)
     * and any image from google for your splash screen
     * 
     * 
     * ENGINEERING TOOLKIT (30 points)
     * Push your project to github (15 points)
     * detail your github project (15 points)
     * submit your github link by Friday 17th (August) 2018
     * late submissions will not be accepted
     * 
     * 
     * 
     */
    public GameUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GameTitle = new javax.swing.JLabel();
        GameScore_Counter = new javax.swing.JLabel();
        GameQuestion = new javax.swing.JLabel();
        GameTimer_Label = new javax.swing.JLabel();
        GameTimer_Counter = new javax.swing.JLabel();
        GameScore_Label = new javax.swing.JLabel();
        GameInput = new javax.swing.JTextField();
        GameGuess = new javax.swing.JButton();
        Menu_Bar = new javax.swing.JMenuBar();
        MainMenu_File = new javax.swing.JMenu();
        File_StartGame = new javax.swing.JMenuItem();
        File_Quit = new javax.swing.JMenuItem();
        MainMenu_Help = new javax.swing.JMenu();
        Help_About = new javax.swing.JMenuItem();
        Help_Tutuorial = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        GameTitle.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        GameTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GameTitle.setText("MATH GAME");

        GameScore_Counter.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        GameScore_Counter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GameScore_Counter.setText("0");

        GameQuestion.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        GameQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GameQuestion.setText("Question");

        GameTimer_Label.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        GameTimer_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GameTimer_Label.setText("Timer :");

        GameTimer_Counter.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        GameTimer_Counter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GameTimer_Counter.setText("00:00");

        GameScore_Label.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        GameScore_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GameScore_Label.setText("Score :");

        GameInput.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        GameInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        GameGuess.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        GameGuess.setText("Guess");
        GameGuess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GameGuessActionPerformed(evt);
            }
        });

        MainMenu_File.setText("File");

        File_StartGame.setText("Start Game");
        File_StartGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_StartGameActionPerformed(evt);
            }
        });
        MainMenu_File.add(File_StartGame);

        File_Quit.setText("Quit");
        File_Quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_QuitActionPerformed(evt);
            }
        });
        MainMenu_File.add(File_Quit);

        Menu_Bar.add(MainMenu_File);

        MainMenu_Help.setText("Help");

        Help_About.setText("About");
        Help_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Help_AboutActionPerformed(evt);
            }
        });
        MainMenu_Help.add(Help_About);

        Help_Tutuorial.setText("Tutorial");
        Help_Tutuorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Help_TutuorialActionPerformed(evt);
            }
        });
        MainMenu_Help.add(Help_Tutuorial);

        Menu_Bar.add(MainMenu_Help);

        setJMenuBar(Menu_Bar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(GameTimer_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(GameScore_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(GameTimer_Counter, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                .addGap(82, 82, 82)
                .addComponent(GameScore_Counter, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GameQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GameInput)
                    .addComponent(GameGuess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(GameTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 7, Short.MAX_VALUE)
                .addComponent(GameTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GameTimer_Label)
                    .addComponent(GameScore_Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GameTimer_Counter, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GameScore_Counter, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GameQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GameGuess, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void File_StartGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_StartGameActionPerformed
        // TODO add your handling code here:
        //check the timer class in the code, set repeat and start
        //if timer was running stop it else start        
        count_timer = 0;
        if(!timer.isRunning()){
        timer.setRepeats(true);
        timer.start();
        }else{
            //then restart
            timer.stop();
            timer.setRepeats(true);
            timer.start();
            GameGuess.setEnabled(true);
            GameGuessActionPerformed(evt);
        }
        number_of_answered_questions = 0;//reset number of questions answered to 0 if at all above 0
        generateQuestion();
    }//GEN-LAST:event_File_StartGameActionPerformed

    private void GameGuessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GameGuessActionPerformed
        // TODO add your handling code here: 
        playSound(beep);
        if(!hasNoInput()){
        //check if user input matches with correct answer
        user_guess = Integer.parseInt(String.valueOf(GameInput.getText()));
        if(user_guess == correct_answer){
            
          //increment and display score
            user_score++;
            GameScore_Counter.setText(String.valueOf(user_score));
            playSound(score);
            
            //clear previous input
            GameInput.setText(null);
            
            //generate next question
            generateQuestion();
           showPopup("Correct!");
        }else{
            //clear previous input
            GameInput.setText(null);
            //move to the next question even when user gets wrong
             generateQuestion();
            showPopup("The correct answer is "+correct_answer);
        }
        }else{
            showPopup("Answer cannot be empty!");
        }
        
    }//GEN-LAST:event_GameGuessActionPerformed

    private void Help_AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Help_AboutActionPerformed
        // TODO add your handling code here:
      playSound(beep);  
      AboutDialog aboutDialog = new AboutDialog(this, true);
      aboutDialog.show();
    }//GEN-LAST:event_Help_AboutActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
           
    }//GEN-LAST:event_formWindowActivated

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
         playSound(music); 
    }//GEN-LAST:event_formWindowOpened

    private void File_QuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_QuitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_File_QuitActionPerformed

    private void Help_TutuorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Help_TutuorialActionPerformed
        // TODO add your handling code here:
        playSound(beep);  
      HelpDialog HelpDialog = new HelpDialog(this, true);
      HelpDialog.show();
    }//GEN-LAST:event_Help_TutuorialActionPerformed

    //this method will generate a question with two random numbers
    //and display on the question label
    private void generateQuestion(){
      //randomly pick any number between 0 and 4 
      //based on the number picked, the question will
      //either be addition, subtraction, multiplication or division   
        
        
      
        //limit number of questions answered
      if(number_of_answered_questions < max_number_of_questions){  
        
      Random operation = new Random(); 
      
      //pick any random number between 0 and 20      
      first_number = new Random().nextInt(20);
       //pick any random number between 0 and 10 
      second_number = new Random().nextInt(10);      
          
  
      if(operation.nextInt(4)==0){
           GameQuestion.setText(first_number+" + "+second_number);
             correct_answer = first_number+second_number; 
              System.out.println("Addition");
             
      }else if(operation.nextInt(4)==1){
           //if operation is 1 let's subtract
             
             GameQuestion.setText(first_number+" - "+second_number);
             correct_answer = first_number-second_number;
                   System.out.println("Subtraction");             
      }else if(operation.nextInt(4)==2){
           //if operation is 2 let's multiply    
            
             GameQuestion.setText(first_number+" x "+second_number);         
             correct_answer = first_number*second_number; 
                       System.out.println("Multiplication");             
      }else if(operation.nextInt(4)==3){
           //if operation is 3 let's divide      
             GameQuestion.setText(first_number+" / "+second_number); 
             if(second_number!=0)
             correct_answer = first_number/second_number; 
             //if you divide a number by zero it throws arithmetic exception
             else correct_answer = first_number;
                           System.out.println("Division");
        
      }else if(operation.nextInt(4)==4){
               //if operation is 4 let's find the remainder when you divide
             GameQuestion.setText("Remainder of "+first_number+" / "+second_number);                    
             correct_answer = first_number%second_number; 
                                 System.out.println("Remainder");
      }
      
      number_of_answered_questions++;
      
      }else {
          //stop timer if it was still running
        if(timer.isRunning()){  
        timer.stop();
        }
        GameQuestion.setText("You Scored "+user_score+"!");
        GameTimer_Counter.setText("Time Taken "+count_timer);
      }
      
    }
    
    //this method checks whether there's any input 
    public boolean hasNoInput(){        
    return GameInput.getText().isEmpty();
    }
    
    
    public void showPopup(String message){
        final Popup p = PopupFactory.getSharedInstance()
                .getPopup(GameInput, new JLabel(message), GameInput.getX(), GameInput.getY());
    p.show();
    // create a timer to hide the popup later
    Timer t = new Timer(5000, (ActionEvent e) -> {
        p.hide();
        });
    t.setRepeats(false);
    t.start();
    }
    
        Timer timer = new Timer(1000, new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
          if(count_timer<max_time){    
          GameTimer_Counter.setText("Time : "+count_timer);
          count_timer++;
          }else{
         GameTimer_Counter.setText("Time Up!"); 
         GameGuess.setEnabled(false);
        
        }
        }
    });  
        
        
        
         // play beep or score sounds sound
   public void playSound(String soundName) {        
       //locate the sounds under resource folder
        URL url = GameUI.class.getResource(soundName);
       if(!soundName.equals(music)){  
          // play only once if not music
       AudioClip clip = Applet.newAudioClip(url);       
       clip.play();
       
       }else{
            try {
                //repeat forever until game is closed
                // ONLY WORKS WITH MIDI FILES !
                // Obtains the default Sequencer connected to a default device.
                URL url2 = GameUI.class.getResource(soundName);
                Sequencer sequencer = MidiSystem.getSequencer();
                //set loop to play until game is closed
                sequencer.setLoopCount(Sequencer.LOOP_CONTINUOUSLY);
                
                // Opens the device, indicating that it should now acquire any
                // system resources it requires and become operational.
                sequencer.open();
                
                // create a stream from a file
                InputStream is = new BufferedInputStream(new FileInputStream(new File(url2.getPath())));
                
                // Sets the current sequence on which the sequencer operates.   
                
                // The stream must point to MIDI file data.
                sequencer.setSequence(is);
                
                // Starts playback of the MIDI data in the currently loaded sequence.
                sequencer.start();
            } catch (MidiUnavailableException ex) {
                Logger.getLogger(GameUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GameUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(GameUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidMidiDataException ex) {
                Logger.getLogger(GameUI.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
   }
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameUI().setVisible(true);
        //Once the window is activated / application opens
        //let's play some background music
       
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem File_Quit;
    private javax.swing.JMenuItem File_StartGame;
    private javax.swing.JButton GameGuess;
    private javax.swing.JTextField GameInput;
    private javax.swing.JLabel GameQuestion;
    private javax.swing.JLabel GameScore_Counter;
    private javax.swing.JLabel GameScore_Label;
    private javax.swing.JLabel GameTimer_Counter;
    private javax.swing.JLabel GameTimer_Label;
    private javax.swing.JLabel GameTitle;
    private javax.swing.JMenuItem Help_About;
    private javax.swing.JMenuItem Help_Tutuorial;
    private javax.swing.JMenu MainMenu_File;
    private javax.swing.JMenu MainMenu_Help;
    private javax.swing.JMenuBar Menu_Bar;
    // End of variables declaration//GEN-END:variables
}
